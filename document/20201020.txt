RequestCounterFilter
LoginServlet

// 전처리(요청이 요청을 처리할 서블릿으로 가기 전)
chain.doFilter
// 후처리(생성된 응답이 클라이언트에게 가는 중)

필터 처리 순서
전처리 ==> 서블릿 ==> 후처리
1. logger.debug("RequestCounterFilter 전처리 부분 - chain.doFilter 호출전");
2. logger.debug("loginServlet.doGet");
3. logger.debug("RequestCounterFilter 전처리 부분 - chain.doFilter 호출후");

위에서부터 읽어내려오면서 해당 uri(설정 해준 uri외 처리)에 대해서 새로운 요청을 보낸다. 
그래서 debug를 출력했을때 출력된다. uri에 대해서 캐싱 해둔다. 그래서 갱신이 안되는 문제점도 있다.

===========================================================================
Wrapper
int ==> Integer

사용 이유 : 요청으로 보낸 파라미터 외에 파라미터를 추가하고 싶을 때 사용

HttpServletRequest ==> 새로운 객체로 생성
parameter 수정은 HttpServletRequest 객체에서는 불가능

request.getParamter() 메소드는 존재(getter)
request.setParamter() 메소드는 없음(setter) ☆☆☆☆☆☆
===> 파라미터를 개발자가 임의로 수정하거나 추가할 수 없다.
	===> 파라미터를 수정하기 위해서는 
		HttpServletRequest 객체를 이용하여 새로운 wrapper 클래스를 생성
		기존 request 객체를 대체

request.getAttribute() 메소드는 존재(getter)
request.setAttribute() 메소드는 존재(setter)

filter/requestParamter.jsp 에서
request.getParamterMap()메소드를 통해 얻은 Map객체에
파라미터를 임의로 추가, 수정하는 작업이 불가능하다.

request.getParamterMap()을 통해 새로운 map객체를 생성하고
해당 map객체에 필요한 파라미터를 추가, 이후 프로세스에서는 새롭게 만든 map객체로 전달

1. map객체를 조작할 Filter
2. HttpServletRequeste객체를 대신할 wrapper
   HttpServletRequsetWrapper 클래스를 상속

==========================================================================
event listener ==> event handler
jquery를 활용하여
버튼이 클릭 되었을 때 특정 로직 실행 하도록 event handler 등록
$("#btn").on("click", function(){});

==> web.xml에 리스너 등록
<listener>
	<listener-class>패키지.클래스명</listener-class>
</listener>

서버에도 감지할 수 있는 이벤트 종류가 존재
life cycle : scope 객체가 생성되고, 소멸될때 이벤트 감지
attribute : scope 객체에 속성이 추가되거나, 수정, 변경될 때 이벤트 감지
기타 등등....
						life cycle					attribute
request	   		ServletRequesetListener	    ServletRequestAttributeListener

session	   		HttpSessionListener			HttpSessionAttributeListener
(새로운 사용자 등장 & 주로 사용)

application		ServletContextListener		ServletContextAttributeListener

================================================================================
logout 기능 추가
/logout url 요청시 
세션에 저장된 속성 제거 : session.invalidate();
응답 화면 : login.jsp

// SessionAttributeListener.attributeRemoved
userMap에서 해당 사용자 정보 삭제
userMap.jsp에서 로그아웃한 사용자는 나오지 않는다.

===========================================================





















