config 파일
1. xml => java
	-> 대다수의 기능은 가능하나, 일부 안되는 것이 있다. => 코드(어노테이션)를 추가해주어야 한다.
2,3 : xml, java 결합(간단하다.)

java config 파일 만들기
1. @Configuration : spring config 파일임을 알려준다. 반드시 추가해주어야 사용가능하다.
2. @ComponentScan(basePackages = {"kr.or.ddit"}) : 스캔할 패키지 설정
@ComponentScan(basePackages = {"kr.or.ddit"}, useDefaultFilters = false) : 기본적으로 스캔할 어노테이션 필터를 꺼버린다.
includeFilters = {@Filter}) : @Filter -> @ComponentScan 안에 선언된 어노테이션

최종
@ComponentScan(basePackages = {"kr.or.ddit"}, useDefaultFilters = false,
			includeFilters = {@Filter(type = FilterType.ANNOTATION, classes = {Service.class, Repository.class })})
			=> 필터 설정
			
<context:include-filter type="annotation" expression="org.springframework.stereotype4894.Service"/>
=> xml보다 java가 좋은 이유 : xml은 모두 문자열로 이루어져 있기 때문에 test코드를 실행하지 않는 이상 오타 등에 대한 부분에 대해 오류를
						빨리 캐치할 수 없지만 java는 컴파일시점에 이미 알 수 있기 때문에 오류를 빨리 찾아 낼 수 있다.
						
3. 빈 생성하기
	@Bean
	public MessageSource messageSource() {}
	=> @Bean 어노테이션이 붙은 생성할 객체를 리턴타입으로 설정한다.
	=> name을 따로 설정하지 않으면 메소드명으로 자동 설정된다.
	=> name은 별칭을 설정할 수 있기 때문에 여러개의 이름을 설정할 수 있다.
	
4. <aop:aspectj-autoproxy/> => @EnableAspectJAutoProxy 어노테이션 사용
	: aspectj는 @Aspect 어노테이션을 사용하게끔 해주는 속성이다.

5. <context:property-placeholder location="classpath:kr/or/ddit/config/db/db.properties"/>
	=> @PropertySource("classpath:kr/or/ddit/config/db/db.properties") 
	=> ${key} -> key 로만 사용
	
-> property(= setter 메소드를 의미한다.)

@Autowired
	private Environment env; 
	// 사용자가 설정한 properties파일 뿐만 환경변수에 대한 부분도 같이 관리해준다.
	// 이것을 통해 파일을 읽어들인다.

최종
=> dataSource.setUrl(env.getProperty("jdbc.url"));

- Resource 타입 넣기 => ClassPathResource 대체 할 수 있다.
sqlSessionFactoryBean
	.setConfigLocation(
		new ClassPathResource("kr/or/ddit/config/db/mybatis-config.xml"));
		
- java에서 다른 빈 주입 받기 => 해당 메소드를 호출한다.(spring 에서 관리하기 때문에 여러개의 객체가 생성되는 것은 아니다.)
 => sqlSessionFactoryBean.setDataSource(dataSource());
 
- <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	=> SqlSessionFactoryBean.getObject() 메소드를 호출했을 때 리턴되는 값을 bean으로 등록한다.
	=> SqlSessionFactoryBean 객체는 객체를 생성하는 역할을 담당하는 객체
	   스프링 프레임워크는 스프링 빈을 생성시 객체가 FactoryBean인터페이를 구현한 경우
	   인터페이스에 정의되어 있는 getObject() 메소드가 리턴하는 객체를 스프링 빈으로 등록한다.

	=> java에서는 따로 처리를 해주어야 한다. -> return sqlSessionFactoryBean.getObject();
	
6. @EnableTransactionManagement : java 기반으로 트랜잭션을 사용하겠다.
								: 스프링 빈중에 PlatformTransactionManager 타입의 빈이 있으면
								해당 빈을 트랜잭션 매니저로 등록해준다.
								
- <tx:advice id="txAdvisor" transaction-manager="transactionManager">
  <aop:config>
  => 위 두 부분에 해당하는 java 설정은 없음
  => @Transactional 어노테이션을 트랜잭션으로 삼을 메소드나 클래스 단위로 붙여준다.
  	-> 스프링 빈을 <bean> 엘레멘트를 통해 일일이 등록 -> @Controller, @Service 어노테이션으로 대체 하는것과 비슷
  => 트랜잭션을 적용하고 싶은 클래스나 메소드에 어노테이션을 추가해주면 된다.

7. java로 스프링 컨테이너를 만들때에는 아래의 파라미터를 추가해주어야 한다.
<context-param>
	<param-name>contextClass</param-name>  => 스프링 컨테이너를 만들 파일을 읽어들인다.
	<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
</context-param>


8. 다른 java 파일에서 주입 받기
@Resource(name = "dataSource")
	private DataSource dataSource;


- 자바에서 
 @Import 사용 : @Configuration으로 설정한 설정 파일을 두 개 이상 사용하는 경우
			-> @Configuration을 이용하여 하나의 파일로 등록하여 사용이 가능하다.
	=> @Import({AopContextJava.class, DataSourceContextJava.class, TransactionContextJava.class}) -> 자바 파일을 읽을때
	=> @ImportResource({"classpath:kr/or/ddit/config/spring/aop-context.xml"}) -> xml 파일을 읽을 때
	
- xml 파일에서 	
<!-- 다른 xml 설정 파일을 같이 불러오기 -->
<import resource="classpath:kr/or/ddit/config/spring/aop-context.xml"/>		
<!-- java 설정 파일 불러오기 -->
<bean id="aopConfig" class="kr.or.ddit.config.spring.AopContextJava"/>

- @WebAppConfiguration : 스프링 컨테이너 생성시 웝기반에서 사용할 수 있는 스프링 컨테이너로 생성해준다.

- @EnableWebMvc : <mvc:annotation-driven/>
// <mvc:annotation-driven/>
	@EnableWebMvc
	public class ApplicationContext extends WebMvcConfigurerAdapter {
		
		// <mvc:default-servlet-handler /> => extends 구현(WebMvcConfigurerAdapter)
		@Override
		public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
			configurer.enable();
		}
	}
	






















