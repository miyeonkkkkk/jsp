모든 데이터 조회는 Ajax로 한다.

문자열로 return
json 전송 -> java 객체로 받았다.
객체를 전송하였다.

return 타입이 viewName(문자열) 또는 객체가 될 수 있다.

ajax 응답 - json(데이터만 받는다.), html 등 => 상황에 따라서 받을 데이터 형식이 달라진다.

ajax의 큰 장점은 페이지 전환이 없다.
=> 검색 조건이 다양하게 있는 경우

==========================================================
OOP : 한 클래스에는 관련된 부분들만 모아둔다.

AOP (Aspect Oriented Programing) : 관점 지향 프로그래밍
: SQL문을 실행하는 메소드 마다 DB를 준비하고 반환하는 작업이 필요하다.
: OOP를 보완하는 개념
: 클래스 혹은 메소드를 넘어서 공통으로 관심있는 부분을 빼서 관리한다.(횡단 관심사)
: transection(all 또는 nothing : 단위업무마다 실행을 했을 모두 성공 또는 모두 실패)
: Aspect - 공통적으로 적용할 행단 관심사항
  Advice - 공통 관심 기능을 언제 적용할지 정의(사실 정해져 있다.) 
  		  : 메소드가 실행되기 전, 메소드가 실행 된 후, 예외 없이 실행된 이후
  		  , 예외 발생시, [메소드 실행전후 또는 예외 발생시점]
  JoinPoint - Advice가 적용 되는 메소드
  PointCut - joinPoint의 부분
  Weaving : 새로운 클래스를 만든다. / Aspectj 라는 라이브러리를 통해 작업한다.
  
 - 필터, 인터셉터와의 차이점
  : 코드를 분해해서 다시 조립하기 때문에 기존코드에 영향을 미친다.
  : 필터, 인터셉터는 레이어의 개념
  
  Advisor : advice를 지칭 (spring에서만 사용하는 개념)
  Proxy : 핵심 기능을 구현한 객체에 advice가 적용한 개체
  
==================================================================
Advice : 공통의 관심사항 - 횡단 관심사항
	spring Advice : before
					after
					around : 메소드 실행 전후
					afterRetruning
					afterThrowing
	=> 스프링 AOP에서는 메소드 실행 전후로만 advice 등록이 가능하다.
PointCut : Advice를 적용할 메소드를 식별정의

메소드 정의 구분
public List<String> 패키지.클래스.getUserPagingList(PageVO pageVo) throws Exception
접근제어자 : 스프링에서는 public 메소드만 허용, 옵션(생략 가능)
예외 : 생략 가능
execution(* kr.or.ddit..service.*.*(..))
					.. : 몇개의 하위 패키지가 올지 모를때 사용
==> [service 패키지에 있는 모든 클래스의 메소드가 실행될 때 --> pointCut] Profiling (시간 측정)

JTA(글로벌 트랜잭션, 전역 트랜잭션) : DB가 다르더라도 트랜잭션을 공동으로 관리한다.
dataSource : Connection Pooled 을 관리하는 자바 표준 이다.

 	
				
  
  
  
  
  
  
  
  
  
  
  
  
  