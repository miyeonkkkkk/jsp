spring batch
배치(일괄처리) : 여러가지 일을 한번에 처리하는 것 => 요청을 통해 하는것이 아닌 자동적으로 돌아간다., 스케줄을 설정하여 관리

spring batch : 꼭 스프링 배치 프로그램을 사용할 필요는 없지만 다른사람들과의 공유를 위해 사용하는 것이 좋다.
====== 아래의 부분은 스프링에서 제공
job luncher : 배치 실행을 담당, Repository(job에 대한 실행결과를 저장한다.) 위에서 실행된다.
job : 실행되는 배치 어플리케이션
step : job을 상세히 분리 / 하나의 job에는 여러개의 step이 존재할 수 있다.
-======= 아래의 부분은 개발자가 직접 개발
reader : 데이터를 읽는다.
processor : 읽힌 데이터를 처리
writer : 처리한 데이터를 저장 -> 꼭 저장을 하지 않을수 도 있다.

--------------------
용어
chunk : 배치러리 되는 단위

주입 방법 : setter, 어노테이션, 생성자

JobExecution : 실행 정보를 가지고 있다.

===========================================================================
개발자가 만들어야 하는 부분
제네릭 : T -> type , S -> source, O -> output, I -> input
reader	  : implements ItmeReader<T>
						
processor : implements ItmeProcessor<I, O>
=> 읽어들인 소스와 가공하여 나가는 결과물

writer    : implements ItemWriter<T>

package : kr.or.ddit.batch.basic
BasicReader <String>
BasicProcessor<String, String>
BasciWriter<String>

Cron : 초 분 시 일 월 요일(각각의 범위가 정해져 있다.)
모든 값 : *

ex) 1 * * * * * : 매 1초마다 실행 (1분 1초, 2분 1초, 3분 1초.....)
    */5 * * * * : 매 5초마다 실행 

==============================================================   
음료 배치
cycle 정보를 조회하여 해당 애음 요일에 해당하는 일자를 계산
daily 테이블에 데이터를 입력

reader		: cycle 테이블 정보를 조회
	SELECT *
	  FROM cycle;
processor   : 애음용일을 실제 일자로 바꾸는 작업 (1 ==> 4~6)
writer      : daily 테이블에 정보를 저장

INSERT INTO daily
SELECT c.cid, c.pid, cal.dt, c.cnt
  FROM cycle c,
(SELECT TO_CHAR(TO_DATE('202011','YYYYMM') + LEVEL - 1, 'YYYYMMDD') dt,
        TO_CHAR(TO_DATE('202011','YYYYMM') + LEVEL - 1, 'd') d
  FROM dual
CONNECT BY LEVEL <= TO_CHAR(LAST_DAY(TO_DATE('202011', 'YYYYMM')),'DD')) cal
WHERE c.day = cal.d;
    
    
    
    
    
    
