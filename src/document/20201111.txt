Isolation level(고립화 레벨) : 트랜잭션이 다른 트랜잭션에게 어떻게 영향을 미치는지를 정의를 해놓은 것
							=> 개발자가 수정을 해서는 안된다.

Transaction
: 트랜잭션의 실행결과가 다른 트랜잭션에게 어떻게 영향을 미치는지 정의 
  => 0~3레벨로 총 4단계가 존재한다. 
: DBMS 마다 기본 읽기 일관성 레벨이 다르다.

- 0 레벨(Read Uncommitted) : 다른 트랜잭션에서 변화가 생기면 커밋하지 않더라도 다른 트랜잭션에서 볼수 있다. / 오라클에서는 지원하지 않는다.
- 1 레벨(Read committed) : 커밋된 데이터만 다른 트랜잭션에서 볼수 있다.
- 2 레벨(Repeatable Read) : 선행 트랜잭션에서 읽은 데이터는 후행 트랜잭션에서 읽지 못한다. => 트랜잭션 내에서 동일한 데이터를 읽었을 때 변경되는 것을 막기 위해서이다.
						  => 동일한 데이터를 읽을 경우 막는다. -> 수정, 삭제만 막으며, 신규 데이터는 막지 못한다.(유령 읽기 효과가 나온다. 신규데이터에 대해서 처음결과와 후 결과가 다르다.)
						  => 오라클에서 지원하지 않는다 -> FOR UPDATE 절을 이용하여 locking 을 걸어 비슷한 효과를 낼수 있다. => lock을 해제할 경우 다른 트랜잭션에서 접근이 가능하다. 
	ex) 트랜잭션 시작 : 월별 부문, 본부, 팀, 파트별 실적 요약한 레포트를 작성
	----------------------------------------
	   -- 월별 부문에 대한 요약 : 1부문(300) - 1본부(100 -> 80 수정시 부문 합계와 맞지 않다.), 2본부(200)
	   SELECT 월, 부문코드, SUM(판매금액)
	     FROM 실적
	    WHERE 월 = '202011'
	      AND 조직 코드 IN (SELECT 조직코드
	                       FROM 조직
	                      WHERE 부문코드 = '영업1부문')
	   GROUP BY 월, 부문코드;
	   --- 영업 1부문에는 영업1본부, 2본부가 존재
	   SELECT 월, 본부코드, SUM(판매금액)
	     FROM 실적
	    WHERE 월 = '202011'
	      AND 조직 코드 IN (SELECT 조직코드
	                       FROM 조직
	                      WHERE 본부코드 = '영업1본부')
	  GROUP BY 월, 본부코드;
- 3 레벨(Serializable Read) : 유령 데이터 읽기를 막는다.
=> 오라클에서는 DATA BLOCK을 이력에 따라 멀티버전으로 관리한다. -> 데이터의 최신 기록과 데이터의 변경전 기록을 같이 관리 해주기 때문에 3 레벨이 가능하다. 
=> SNAPSHOT TOO OLD 오류 발생(오라클에서만 발생 -> 멀티관리를 오라클에서만 하기 때문) : SNAPSHOT(블럭의 버전을 나타낸다.) / LRU : 가장 최근에 적게 사용된 데이터부터 삭제 되기 때문에 발생

@Override
	public int insertMember(MemberVO mv) {
//		logger.debug("첫번째 insert 시작전");
//		memberDao.insertMember(mv);
//		logger.debug("첫번째 insert 종료후");

		// 첫번째 쿼리는 정상적으로 실행되지만
		// 두번째 쿼리에서 동일한 데이터를 입력하여 PRIMARY KEY 제약조건에 의해
		// SQL 실행 실패
		// 첫번째 쿼리는 성공했지만 트랜잭션 설정을 service 레벨에 설정을 하였기 때문에
		// 서비스 메소드에서 실행된 모든 쿼리를 rollback 처리한다.
		
//		logger.debug("두번째 insert 시작전");
//		memberDao.insertMember(mv);
//		logger.debug("두번째 insert 종료후");

		return 1;
	}
	
===================================================================
SQL 로그 남기기
1. log4jdbc.log4j2.properties ==> src/main/resource 복사
2. logback.xml 파일의 하위 logger 5개를 복사하여 본인 파일에 붙여넣기
 
















	                      