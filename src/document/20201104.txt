<context:component-scan base-package="kr.or.ddit" />
	
<!-- @Resource, @Autowired, @Inject : 해당 어노테이션을 작업해주는 스프링 설정 파일
	 ==> BeanPostProcessor 
-->
<context:annotation-config/>

==> component-scan에도 annotation-config 기능이 있다. 그러나 이외에 처리하지 못한 빈을 처리하기 위해 사용한다.

jsp는 서버에서 실행하여 응답을 보내는 것이기 때문에 WEB-INF 폴더에 접근 가능하다.

Spring 에서는 request, session객체를 인자로 넣어줄수 있다. application 객체는 안된다.

Spring 에서는 Model == request 객체이다. Model에서 데이터를 넣고 꺼내온다.
Model(import : org.springframework.ui.Model) : view 객체에서 응답을 생성할 때 참조할 데이터를 담는 객체
											 jsp/servlet 기반의 request 역할을 담당
								
Spring 에서는 서버가 없어도 테스트가 가능하다.
=> @WebAppConfiguration : 스프링 컨테이너를 웹기반에서 동작하는 컨테이너로 생성하는 옵션
테스트 대상 클래스 : LoginController
					 --> MemberService
							--> MemberRepository
부모컨테이너와 자식컨테이너로 나누어져 있기 때문에 두개다 모두 가져와야 한다.
LogintController 스프링 빈을 생성하기 위해서 MemberService, MemberRepository 스프링 빈이 필요
즉 service, repository 빈을 스캔하는 설정과 controller를 스캔하는 설정 두개가 필요
WebApplicationContext : 웹기반에서 돌아가는 applicationContext -> 스프링 컨테이너다.
@Autowired : 타입으로 주입할 객체를 찾는다. -> 타입이 한개일 경우 문제가 발생하지 않는다.


post() : get/post 요청
param(파라미터명, 파라미터값) : 요청시 보낼 파라미터
status() : 스프링 프레임워크에 의해 요청이 처리되고 생성된 응답 코드
view() : 스프링 프레임워크에 의해 요청이 처리되는 과정에서 반환된 viewName
model() : 컨트롤러에서 설정한 속성값을 담는 객체
request
	 
파라미터 이름과 동일한 이름의 메소드 인자를 선언하면
스프링 프레임워크가 자동으로 바인딩 해준다.
값을 담을 수 있는 객체를 메소드 인자로 선언한 경우에도 필드명과 파라미터 명이
동일하면 자동으로 바인딩 처리를 해준다.
이때 값을 담는 객체를 스프링 프레임 워크에서는 command 객체라고 한다.
Model : view 객체에서 응답을 생성할 때 참조할 데이터를 담는 객체
		jsp/servlet 기반의 request 역할을 담당

Spring controller 특징
- servlet과 다르게 메소드 인자/리턴 타입 구성이 자유롭다.
	=> servlet : HttpServletRequest request, HttpServletResponse response 2개의 인자만 가능 / 리턴타입 void
- 파라미터 작업이 매우 쉬워진다.
	=> Spring에서는 바인딩(파라미터이름과 메소드 이름이 동일할 때, command객체 이름이 동일할 때)을 알아서 해주기 때문 -> Handler Adapter 에서 처리
- controller 클래스에 다양한 요청 처리 메소드 생성 가능
	=> doGet/doPost 등의 메소드별 처리에서 벗어나 자유롭게 메소드 선언
	=> servlet : get,post방식의 요청을 동일하게 할때 -> service메소드를 재정의하거나 doXXX메소드 호출
- request 속성 전달을 추상화함
	=> request -> model/modeMap/map
	
=> 'redirect:url' => redirect 요청처리

=> 기존 @WebServlet 혹은 web.xml url-mapping을 통해 url등록 => 스프링 @RequestMapping("/login")

============================================================================================
@RequestMapping : 요청 처리할 컨트롤러의 메소드를 지정
	사용위치 : 1. class
			2. method

@Controller
@RequestMapping(path="/mainPath")
public class xxxxController{
	
	@RequestMapping(path="subPath")
	public String subPath(){
	
	}
	
	@RequestMapping(path="subPath2")
	public String subPath2(){
	
	}
}

=> 요청 : /mainPath/subPath ==> xxxxController.subPath(); 호출
=> 요청 : /mainPath/subPath2 ==> xxxxController.subPath2(); 호출

@RequestMapping 속성
path : url 패턴(default)
	@RequestMapping("login/view") == @RequestMapping(path="login/view")
	
method : 요청 메소드에 따라 설정한 요청에 대해서만 처리하게끔 한정
	@RequestMapping(path="login/view" method = RequestMethod.GET)
	@RequestMapping(path="login/view" method = {RequestMethod.GET, RequestMethod.POST})
	=> 복수개 설정도 가능하다.
	@RequestMapping 대신에 @GetMapping(), @PostMapping() : 이 어노테이션을 통해서도 제한 가능 => 4.3 버전 이상에서만 가능

params : 파라미터 중에 특정 값을 갖거나, 파라미터가 존재하는 등 파라미터와 관련된 조건을 기술
	@RequestMapping(path = "/process", params = {"userid"}) : userid 파라미터가 존재할 때 처리
	@RequestMapping(path = "/process", params = {"!userid"}) : userid 파라미터가 존재하지 않을때 처리
	@RequestMapping(path = "/process", params = {"pass=brownPass"}) : pass 파라미터가 전송되었고 그 값이 brownPass 일때 처리
	@RequestMapping(path = "/process", params = {"pass!=brownPass"}) : pass 파라미터가 전송되었고 그 값이 brownPass가 아닐때 처리

ajax 에서 다시 설명...
header : 요청 헤더에 특정 값이 담겨 있을 때만 요청처리
consume, producer : 특정 컨텐트 타입만 요청처리
dataType (xml, json, script, html)
- 클라이언트가 보내는 dataType : Content-type => consume
- 서버로부터 받기 원하는 dataType : AcceptHeader => producer
----------------------------------------------------------
-> jsp/servlet 기반에서 사용한 코드 : request.setAttribute("to_day", new Date());
=> model.addAttribute("to_day", new Date());
=> model 객체 대신에 request객체에 담아도 되지만 특수한 view인 경우 인식을 못할 때가 있으므로
   model 객체에 담는 것이 좋다.

------------------------------------------------------------
스프링 컨틀로러 메소드의 인자 : 서블릿과 다르게 정해진 규칙 안에서 자유롭게 인자를 설정 할 수 있다.
1. Servlet Api : HttpServletRequset, HttpServletResponse, HttpSession
	public String method(HttpServletRequset request){
		HttpSession session = request.getSession();
		session.setAttribute("S_MEMBER", ....);
	}(X)
	
	public String method(HttpSession session){
		session.setAttribute("S_MEMBER", ....);
	}(O)

2. command 객체 : form 전송을 통해 전달된 파라미터 즉 파라미터를 담는 객체 - Value Object

3. 파라미터를 담을 개별 변수 : String userid, String pass

3.5 bindingResult : 바인드하는 과정에서 값을 체크할 수 있다. => 바인딩 결과를 담는 객체 - 추후 validation 수업시 진행

4. model/ModelMap/map : 속성을 저장할 객체 (servlet 에서 request에 해당)

5. RedirectAttributes : 리다이렉트 페이지에서 사용할 1회용 속성을 설정(리다이렉트 페이지로 요청을 했을 때 최초 한번만 보여줄 속성을 설정)

- HttpMethod : post, get
- Principal : Spring Security에서 사용하는 사용자 인증 정보

.파일 업로드, 리다이렉트 방법만 남음

스프링 컨트롤러에서 사용할 수 있는 어노테이션
@RequestParam : 파라미터 이름과 값을 담을 변수 명이 다를 때 파라미터를 특정 변수에 할당 할 수 있다.
				기본 값 설정
				사용방법 : 컨틀롤러 메소드이 인자에 설정
				ex) @RequestParam(name = "userid") String user_id
					@RequestParam(name = "email") String user_id => 없을 경우 400에러
					@RequestParam(name = "email", required = false, defaultValue = "brown@line.kr") String user_id
					@RequestParam(name = "받고싶은 값의 파라미터") String user_id
	name : 받고싶은 파리미터 이름 설정
	required : 파라미터 존재 유무 설정, 기본은 true
			   required가 true일때 해당 파라미터가 전송되지 않으면 에러
	defaultValue : 파라미터의 값이 없을때 기본값으로 설정
	
@RequestPart : multipart/form-data(콘텐츠가 다를때 part별로 보낸다.) : 파일 업로드시 다시

@RequestHeader , @CookieValue(쿠키값을 가져온다.) : 요청시 사용된 헤더, 쿠키값을 파라미터 인자에서 받을 수 있다.

@PathVariable : 패스 변수
				@RequestMapping에 설정한 url 경로 중 일부를 파라미터 인자로 받아온다.
	
	요청 -> /notice/ct 
	요청 -> /notice/sk 
	@RequsetMapping("/notice/{library}")
	public String notice(@PathVariable("library") String library){
		
	}
	=> 사이트하나에서 패스에 따라서 보여주는 화면을 다르게 지정할 수 있다.

스프링 컨트롤러의 리턴 타입
1. String : 논리적인 viewName을 의미
			ViewResolver에 의해 처리할 view를 결정하여 처리, 많이 사용되는 형태

2. ModelAndView : 스프링 컨테이너는 응답 생성을 위해 내부적으로 ModelAndView 객체를 생성 하여 처리하는데
 				  그 과정을 개발자가 직접 하는 것

3. void : servlet과 같은 형태, outputstream, writer 객체를 통해 응답을 직접 생성하는 경우
		  image 응답을 생성하는 controller 생성(추후)

4. View : 응답을 처리할 View객체를 직접 개발자가 명시


@ModelAttribute : 메소드, 메소드 인자에서 사용 -> 사용하는 곳에 따라 의미가 달라진다.
- 메소드에서 사용시(공통적인 로직을 분리할 수 있다.) : 1. @RequestMapping 어노테이션이 붙은 메소드가 실행되기 전에 항상 먼저 실행
				 						 2. 해당 메소드에서 리턴하는 값을 Model 객체에 자동으로 설정

- 메소드 인자에서 사용시 : 모델에 설정된 속성을 메소드 인자에서 받을 수 있다.
	public String methodName(@ModelAttribut("rangers") List<String> rangers){
	}
	@ModelAttribute("test") MemberVO memberVo : 없는 속성값을 받을 시에 객체는 생성하지만 안에 값이 비어져 있는 객체를 반환한다.
	MemberVo 객체는 null이 아니지만 안에 있는 필드가 null 이다.

@SessionAttribute : class레벨에 적용
					설정한 속성을 session에 저장하여 @ModelAttribute 어노테이션이 붙은 메소드가 요청시마다 실행되는 것을 방지한다.
					@ModelAttribute 어노테이션이 붙은 메소드가 최초 요청 한번만 실행 된다.

servlet
인코딩 - get : server.xml (톰캣에서는)
	   post : requset.set...
spring : CharacterEncodingFilter 클래스 사용
<!-- 인코딩 설정 - 스프링 프레임 워크 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	

- WebTestConfig.java : 파일을 통해 공통적인 로직을 빼서 관리










	
	
	
	



	