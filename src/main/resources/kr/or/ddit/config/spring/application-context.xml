<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- kr.or.ddit 패키지 하위의 클래스중 @Controller 어노테이션이 붙은 클래스를 스캔하여 스프링 빈으로 생성 -->
	<context:component-scan base-package="kr.or.ddit" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<context:annotation-config />

	<!-- viewName이 빈에 등록한 id와 같으면 해당 view를 사용한다. -->
	<bean id="profileImgView"
		class="kr.or.ddit.mvc.view.ProfileImgView" />
	<bean id="profileImgDownloadView"
		class="kr.or.ddit.mvc.view.ProfileImgDownloadView" />
	<bean id="jsonView"
		class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />

	<!-- tiles view resolver 추가 1. tiles 설정 작업 ==> TilesConfigurer를 통해 설정 2. 
		tiles view resolver 등록 -->
	<bean id="titlesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>
					classpath:/kr/or/ddit/config/tiles/tiles-definition.xml
				</value>
			</list>
		</property>
	</bean>

	<bean
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView"></property>
		<property name="order" value="0"></property>
	</bean>


	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="1" />
	</bean>


	<!-- InternalResourceViewResolver 파일이 있건없건 다 보내기때문에 우선순위 무조건 마지막 -->
	<!-- jsp를 처리할 viewResolves -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- prefix : 접두어, suffix : 접미어 Controller가 리턴하는 문자열에 prefix, suffix를 적용하여 
			해당 경로의 파일로 응답을 생성 LoginController.getView() ==> "login/view" prefix viewName 
			suffix "/WEB-INF/views/" + "login/view" + ".jsp" ==> /WEB-INF/views/login/view.jsp -->
		<property name="order" value="2" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- @Controller, @RequsetMapping, HandlerMapping, HandlerAdapter formatting 
		conversion service, validation 등 spring mvc 패턴이 필요한 어노테이션, 엘레멘트 처리 -->
	<mvc:annotation-driven />

	<!-- Spring이 처리하지 못하는 요청을 서버에 등록되어 있는 default servlet에 위임한다. -->
	<!-- Spring Container가 처리하지 못하는 요청에 대해 server에 등록된 default servlet에게 위임 -->
	<mvc:default-servlet-handler />

	<!-- 파일 업로드 처리를 위한 multipartResolver 설정 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- 정적 자원 매핑 처리 1. url 단축을 목적 2. WEB-INF : 외부에서 접근 불가능한 공간에 저장된 자원들 접근 
		매핑 - 사용자가 요청하는 경로중에 /resoureces/ 가 들어간다면 location 에 적용한 url에서 찾아라 - mappring 
		: 가상의 경로이다 -->
	<mvc:resources mapping="/resources/**" location="/WEB-INF/views/error/" />

	<!-- localeResolver -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<!-- locale 변경 감지 interceptor -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean
				class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
				<property name="paramName" value="lang" />
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- excel poi 사용 -->
	<bean id="excelView" class="kr.or.ddit.mvc.view.ExcelDownloadView" />




















</beans>
